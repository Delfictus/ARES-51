[build-system]
requires = ["maturin>=1.4,<2.0"]
build-backend = "maturin"

[project]
name = "novacore-csf"
version = "0.1.0"
description = "Python bindings for NovaCore ARES Chronosynclastic Fabric"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT OR Apache-2.0" }
authors = [
    { name = "NovaCore Team", email = "dev@novacore.io" }
]
maintainers = [
    { name = "NovaCore Team", email = "dev@novacore.io" }
]
keywords = [
    "novacore",
    "real-time",
    "computing",
    "csf",
    "ares",
    "temporal",
    "distributed"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Hardware",
    "Typing :: Typed"
]
dependencies = [
    "numpy>=1.24.0",
    "typing-extensions>=4.5.0; python_version < '3.11'"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
viz = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]
ml = [
    "torch>=2.0.0",
    "tensorflow>=2.13.0",
    "scikit-learn>=1.3.0",
]

[project.urls]
Homepage = "https://github.com/Delfictus/NovaCore"
Documentation = "https://docs.novacore.io"
Repository = "https://github.com/Delfictus/NovaCore.git"
Issues = "https://github.com/Delfictus/NovaCore/issues"

[tool.maturin]
# Rust extension module configuration
module-name = "novacore._csf"
features = ["python-bindings"]
python-source = "python"
strip = true

[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests", "python/tests"]
pythonpath = ["python"]

[tool.coverage.run]
source = ["novacore"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
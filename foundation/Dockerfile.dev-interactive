# ARES ChronoFabric - Interactive Development Environment
# Ubuntu-based isolated development container for Claude Code integration
# Author: Ididia Serfaty

FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install system dependencies and development tools
RUN apt-get update && apt-get install -y \
    # System essentials
    curl \
    wget \
    ca-certificates \
    gnupg \
    lsb-release \
    software-properties-common \
    # Build tools
    build-essential \
    cmake \
    pkg-config \
    libssl-dev \
    protobuf-compiler \
    clang \
    llvm-dev \
    libclang-dev \
    # Development utilities
    git \
    vim \
    nano \
    tmux \
    tree \
    jq \
    unzip \
    htop \
    strace \
    gdb \
    valgrind \
    # Shell environments
    fish \
    zsh \
    bash-completion \
    # System utilities
    sudo \
    openssh-client \
    # Python for tooling
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    # Python will be used for tooling, Node.js installed separately
    # (Node.js installed via NodeSource below)
    # Additional utilities
    less \
    man-db \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Node.js 20 LTS from NodeSource
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*

# Install Rust via rustup
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    --default-toolchain 1.82.0 \
    --profile default \
    --component rustfmt,clippy,rust-analyzer,rust-src
ENV PATH="/root/.cargo/bin:$PATH"

# Install nightly toolchain
RUN /root/.cargo/bin/rustup toolchain install nightly --component rust-analyzer

# Install essential Cargo tools (skip problematic ones)
RUN /root/.cargo/bin/cargo install cargo-watch

# Install Claude CLI using the official installer
RUN npm install -g @anthropic-ai/claude-code

# Create development user with proper permissions
RUN useradd -m -s /bin/bash -u 1000 -G sudo dev && \
    echo 'dev ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
    # Create development directories with proper ownership
    mkdir -p /home/dev/.local/bin /home/dev/.cargo /home/dev/.config && \
    # Copy Rust installation to dev user
    cp -r /root/.cargo /home/dev/ && \
    cp -r /root/.rustup /home/dev/ && \
    chown -R dev:dev /home/dev/.cargo /home/dev/.rustup /home/dev/.local /home/dev/.config

# Switch to development user
USER dev
WORKDIR /home/dev

# Set up development environment variables
ENV RUST_BACKTRACE=full
ENV CARGO_HOME=/home/dev/.cargo
ENV RUSTUP_HOME=/home/dev/.rustup
ENV PATH="/home/dev/.local/bin:/home/dev/.cargo/bin:/usr/local/bin:$PATH"

# Configure shell environment
RUN echo 'export PATH="$HOME/.local/bin:$HOME/.cargo/bin:$PATH"' >> ~/.bashrc && \
    echo 'export RUST_BACKTRACE=full' >> ~/.bashrc && \
    echo 'export RUST_LOG=debug' >> ~/.bashrc && \
    echo 'alias ll="ls -laF"' >> ~/.bashrc && \
    echo 'alias la="ls -A"' >> ~/.bashrc && \
    echo 'alias l="ls -CF"' >> ~/.bashrc && \
    echo 'alias c="clear"' >> ~/.bashrc && \
    echo 'alias ..="cd .."' >> ~/.bashrc && \
    echo 'alias ...="cd ../.."' >> ~/.bashrc && \
    echo 'alias grep="grep --color=auto"' >> ~/.bashrc && \
    echo 'alias fgrep="fgrep --color=auto"' >> ~/.bashrc && \
    echo 'alias egrep="egrep --color=auto"' >> ~/.bashrc

# SET API KEY HERE
# RUN echo 'export CLAUDE_API_KEY=replace me' >> ~/.bashrc

# Configure Git with default values
RUN git config --global user.name "Developer" && \
    git config --global user.email "dev@localhost" && \
    git config --global init.defaultBranch main && \
    git config --global core.editor vim && \
    git config --global push.default simple

# Create workspace directory
RUN mkdir -p /home/dev/workspace

# Create Claude configuration directories with proper permissions
RUN mkdir -p /home/dev/.claude/plugins && \
    mkdir -p /home/dev/.serena

# Install UV for Python package management
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

# RUN uvx --from git+https://github.com/oraios/serena serena start-mcp-server
RUN claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena start-mcp-server --context ide-assistant --project /home/dev/workspace


# Create development startup script
RUN cat > /home/dev/dev-startup.sh << 'EOF'
#!/bin/bash

# ARES ChronoFabric Development Environment Startup
echo "🚀 ARES ChronoFabric Interactive Development Environment"
echo "════════════════════════════════════════════════════════"
echo "📁 Workspace: $(pwd)"
echo "🔧 Available Tools:"
echo "   • Rust $(rustc --version | cut -d' ' -f2) with nightly toolchain"
echo "   • Claude CLI $(claude --version 2>/dev/null | head -1 || echo 'ready')"
echo "   • Cargo tools: watch, audit"
echo "   • Development utilities: git, vim, tmux, gdb, valgrind"
echo ""
echo "🧠 AI Development Features:"
echo "   • Claude Code: AI-assisted development with proper permissions"
echo "   • Isolated configuration prevents permission conflicts"
echo ""
echo "💡 Quick Start:"
echo "   claude chat          # Start AI-assisted development"
echo "   cargo build --workspace  # Build entire workspace"
echo "   cargo test            # Run tests"
echo "   cargo watch -x check # Auto-rebuild on changes"
echo ""
echo "🔗 Project: ARES ChronoFabric Quantum Temporal System"
echo "════════════════════════════════════════════════════════"
echo ""

# Check if Claude API key is set
if [ -z "$CLAUDE_API_KEY" ]; then
    echo "⚠️  CLAUDE_API_KEY not set. Set it to enable full Claude functionality:"
    echo "   export CLAUDE_API_KEY=your_api_key_here"
    echo ""
fi

# Display current directory info if in a Rust project
if [ -f "Cargo.toml" ]; then
    echo "🦀 Detected Rust workspace"
    if [ -f "rust-toolchain.toml" ]; then
        echo "   Using pinned toolchain: $(cat rust-toolchain.toml | grep channel | cut -d'"' -f4)"
    fi
    echo "   Workspace members: $(cargo metadata --no-deps --format-version 1 2>/dev/null | jq -r '.workspace_members | length') crates"
    echo ""
fi

# Test Claude CLI availability
echo "🧪 Testing Claude CLI..."
if command -v claude >/dev/null 2>&1; then
    echo "   ✅ Claude CLI available: $(which claude)"
    if [ -w "$HOME/.claude" ]; then
        echo "   ✅ Claude config directory writable"
    else
        echo "   ❌ Claude config directory not writable"
    fi
else
    echo "   ❌ Claude CLI not found in PATH"
fi
echo ""
EOF

RUN chmod +x /home/dev/dev-startup.sh

# Create enhanced .bashrc with startup message
RUN echo '' >> ~/.bashrc && \
    echo '# ARES Development Environment' >> ~/.bashrc && \
    echo 'if [[ $- == *i* ]] && [ "$PWD" != "$HOME" ]; then' >> ~/.bashrc && \
    echo '    ~/dev-startup.sh' >> ~/.bashrc && \
    echo 'fi' >> ~/.bashrc

# Set working directory to workspace
WORKDIR /home/dev/workspace

# Expose common development ports
EXPOSE 8000-8010 3000 4000 5000 9000-9010

# Set default command
CMD ["/bin/bash", "-l"]

# Labels for container management
LABEL maintainer="Ididia Serfaty <IS@delfictus.com>"
LABEL project="ARES ChronoFabric"
LABEL purpose="Interactive Development Environment"
LABEL version="2.0"
LABEL base="ubuntu:22.04"
LABEL description="Ubuntu-based isolated interactive development environment for ARES ChronoFabric with Claude Code integration"

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Quick checks before running expensive tests
  pre-checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check conventional commits
        uses: webiny/action-conventional-commits@v1.3.0
        
      - name: Check for large files
        uses: actionsdesk/lfs-warning@v3.2
        with:
          filesizelimit: 10485760 # 10MB

  # Format checking
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Linting with Clippy
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: pre-checks
    strategy:
      matrix:
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config cmake
          
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.rust }}
          
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Protocol compliance check
  protocol-compliance:
    name: Protocol Compliance Check
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install ripgrep
        run: sudo apt-get update && sudo apt-get install -y ripgrep
        
      - name: Make script executable
        run: chmod +x scripts/check-protocol-compliance.sh
        
      - name: Run protocol compliance check
        run: ./scripts/check-protocol-compliance.sh

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run security audit
        run: cargo audit
        
      - name: Check dependencies
        run: cargo tree --duplicate

  # Build and test on multiple platforms
  test:
    name: Test - ${{ matrix.os }} / ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    needs: [fmt, clippy, protocol-compliance]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, nightly]
        include:
          - os: ubuntu-latest
            rust: stable
            coverage: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config cmake protobuf-compiler
          
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake protobuf
          
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}
          
      - name: Build
        run: cargo build --all --all-features --verbose
        
      - name: Run tests
        run: cargo test --all --all-features --verbose
        
      - name: Run doc tests
        run: cargo test --doc --all-features
        
      - name: Install cargo-tarpaulin
        if: matrix.coverage
        run: cargo install cargo-tarpaulin
        
      - name: Generate coverage
        if: matrix.coverage
        run: cargo tarpaulin --out Xml --all-features --workspace --timeout 600
        
      - name: Upload coverage
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          fail_ci_if_error: true

  # CUDA tests (optional)
  cuda-test:
    name: CUDA Tests
    runs-on: ubuntu-latest
    needs: [fmt, clippy]
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'cuda')
    container:
      image: nvidia/cuda:12.3.0-devel-ubuntu22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl gcc g++ pkg-config libssl-dev cmake
          
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
      - name: Build with CUDA
        run: |
          source $HOME/.cargo/env
          cargo build --features cuda
          
      - name: Run CUDA tests
        run: |
          source $HOME/.cargo/env
          cargo test --features cuda-tests

  # Benchmark comparison
  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        
      - name: Install criterion
        run: cargo install cargo-criterion
        
      - name: Run benchmarks
        run: cargo criterion --all-features --message-format json > criterion.json
        
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: CSF Benchmarks
          tool: 'cargo'
          output-file-path: criterion.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Documentation build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        
      - name: Build documentation
        run: cargo doc --no-deps --all-features --document-private-items
        env:
          RUSTDOCFLAGS: "--enable-index-page -Zunstable-options"
          
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: target/doc/

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        
      - name: Run integration tests
        run: cargo test --test '*' -- --test-threads=1
        env:
          REDIS_URL: redis://localhost:6379

  # Final status check
  ci-success:
    name: CI Success
    if: ${{ success() }}
    needs: [test, security, docs, integration, protocol-compliance]
    runs-on: ubuntu-latest
    steps:
      - name: CI Passed
        run: echo "All CI checks passed successfully!"
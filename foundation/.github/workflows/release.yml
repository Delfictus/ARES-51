name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ARES CSF ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            # ARES CSF ${{ steps.get_version.outputs.version }}
            
            ## What's Changed
            
            <!-- Add release notes here -->
            
            ## Breaking Changes
            
            <!-- List any breaking changes -->
            
            ## Installation
            
            See the [installation guide](https://docs.ares-csf.io/installation) for detailed instructions.
            
            ## Checksums
            
            <!-- Checksums will be added automatically -->

  build-release:
    name: Build Release - ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: ares-csf
            features: "default"
            
          # Linux x86_64 with CUDA
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: ares-csf-cuda
            features: "default,cuda"
            suffix: -cuda
            
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: ares-csf
            features: "default"
            use_cross: true
            
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: ares-csf
            features: "default"
            
          # macOS ARM64
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: ares-csf
            features: "default"
            
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: ares-csf.exe
            features: "default"
            
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross
        
      - name: Install CUDA toolkit
        if: contains(matrix.features, 'cuda')
        uses: Jimver/cuda-toolkit@v0.2.11
        with:
          cuda: '12.3.0'
          
      - name: Build release binary
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }} --features "${{ matrix.features }}"
          else
            cargo build --release --target ${{ matrix.target }} --features "${{ matrix.features }}"
          fi
        shell: bash
        
      - name: Package binary
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../ares-csf-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}.zip ${{ matrix.binary_name }}
          else
            tar czf ../../../ares-csf-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}.tar.gz ${{ matrix.binary_name }}
          fi
          cd ../../../
        shell: bash
        
      - name: Calculate checksums
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            sha256sum ares-csf-*.zip > checksums-${{ matrix.target }}${{ matrix.suffix }}.txt
          else
            sha256sum ares-csf-*.tar.gz > checksums-${{ matrix.target }}${{ matrix.suffix }}.txt
          fi
        shell: bash
        
      - name: Upload Release Asset (tar.gz)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./ares-csf-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}.tar.gz
          asset_name: ares-csf-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload Release Asset (zip)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./ares-csf-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}.zip
          asset_name: ares-csf-${{ needs.create-release.outputs.version }}-${{ matrix.target }}${{ matrix.suffix }}.zip
          asset_content_type: application/zip
          
      - name: Upload checksums
        uses: actions/upload-artifact@v3
        with:
          name: checksums
          path: checksums-*.txt

  build-docker:
    name: Build Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            aressystems/csf:${{ needs.create-release.outputs.version }}
            aressystems/csf:latest
            ghcr.io/ares-systems/csf:${{ needs.create-release.outputs.version }}
            ghcr.io/ares-systems/csf:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          # Publish in dependency order
          cargo publish -p csf-core --no-verify
          sleep 30
          cargo publish -p csf-kernel --no-verify
          sleep 30
          cargo publish -p csf-bus --no-verify
          sleep 30
          cargo publish -p csf-mlir --no-verify
          sleep 30
          cargo publish -p csf-sil --no-verify
          sleep 30
          cargo publish -p csf-clogic --no-verify
          sleep 30
          cargo publish -p csf-ffi --no-verify
          sleep 30
          cargo publish -p csf-network --no-verify
          sleep 30
          cargo publish -p csf-telemetry --no-verify

  finalize-release:
    name: Finalize Release
    needs: [create-release, build-release, build-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download checksums
        uses: actions/download-artifact@v3
        with:
          name: checksums
          
      - name: Combine checksums
        run: |
          cat checksums-*.txt > checksums.txt
          
      - name: Upload combined checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain
          
      - name: Generate release notes
        run: |
          # Generate changelog since last release
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > release-notes.md
          
      - name: Update release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
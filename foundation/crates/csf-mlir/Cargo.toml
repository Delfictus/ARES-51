[package]
name = "csf-mlir"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true
description = "MLIR runtime integration for hardware acceleration in ARES CSF"

[dependencies]
# Core dependencies
csf-core = { path = "../csf-core" }
num-traits = "0.2"

# MLIR and LLVM bindings (optional for now)
mlir-sys = { version = "0.2", optional = true }
llvm-sys = { version = "170", optional = true }
inkwell = { version = "0.4", features = ["llvm17-0"], optional = true }

# GPU support
cuda-sys = { version = "0.2", optional = true }
# Real CUDA runtime integration (Phase 2.1)
cudarc = { version = "0.11", features = ["std", "cublas", "cuda-12000"], optional = true }
cublas-sys = { version = "0.1", optional = true }
cudnn-sys = { version = "0.0.3", optional = true }
hip-sys = { version = "0.1", optional = true }
vulkano = { version = "0.34", optional = true }
# Real Vulkan compute integration (Phase 2.2)
ash = { version = "0.37", features = ["linked"], optional = true }
gpu-allocator = { version = "0.25", features = ["vulkan"], optional = true }
spirv-reflect = { version = "0.2", optional = true }
wgpu = { version = "0.19", optional = true }

# Core structures
parking_lot = { workspace = true }
dashmap = { workspace = true }

# Math and ML
num-complex = { workspace = true }
# Real BLAS/LAPACK for tensor operations (Phase 1.2)
blas-src = { version = "0.10", features = ["openblas"], optional = true }
cblas = { version = "0.3", optional = true }
lapack = { version = "0.20", optional = true }
ndarray = { version = "0.15", features = ["blas"], optional = true }
# Real MLIR bindings (Phase 1.1) 
melior = { version = "0.18", optional = true }
# Real cryptography (Phase 3.1)
ring = { version = "0.17", optional = true }
ed25519-dalek = { version = "2.1", optional = true }
argon2 = { version = "0.5", optional = true }
rand = { version = "0.8", optional = true }
chacha20poly1305 = { version = "0.10", optional = true }
zeroize = { version = "1.8", features = ["zeroize_derive"], optional = true }
crc32fast = { version = "1.4", optional = true }
# Authentication and authorization (Phase 3.2)
jsonwebtoken = { version = "9.3", optional = true }
uuid = { version = "1.10", features = ["v4", "serde"], optional = true }
base64 = { version = "0.22", optional = true }

# Additional dependencies needed for the existing code
csf-time = { path = "../csf-time" }
once_cell = "1.19"

# Async runtime
tokio = { workspace = true }
futures = { workspace = true }
async-trait = { workspace = true }

# Additional dependencies for enhanced backend system
rayon = { workspace = true }
num_cpus = { workspace = true }
chrono = { version = "0.4", features = ["serde"] }

# Memory management
memmap2 = "0.9"
bytemuck = { version = "1.14", features = ["derive"] }

# Serialization
serde = { workspace = true }
serde_json = { workspace = true }
bincode = { workspace = true }
bytes = { workspace = true }

# Error handling
thiserror = { workspace = true }
anyhow = { workspace = true }

# Logging
log = { workspace = true }
tracing = { workspace = true }

[features]
default = []  # Minimal default to avoid LLVM dependency
llvm = ["mlir-sys", "llvm-sys", "inkwell"]
# Phase 1 features - real implementations
real-mlir = ["melior"]
real-tensor = ["blas-src", "cblas", "lapack", "ndarray"]
# Phase 3 features - security implementations
real-crypto = ["ring", "ed25519-dalek", "argon2", "rand", "chacha20poly1305", "zeroize", "crc32fast"]
real-auth = ["jsonwebtoken", "uuid", "base64", "real-crypto"]
# Phase 2.1 features - CUDA runtime
cuda = ["cuda-sys"]
real-cuda = ["cudarc", "cublas-sys", "cudnn-sys"]
hip = ["hip-sys"]
vulkan = ["vulkano"]
# Phase 2.2 features - Vulkan compute
real-vulkan = ["ash", "gpu-allocator", "spirv-reflect"]
webgpu = ["wgpu"]
tpu = []
all-backends = ["cuda", "hip", "vulkan", "webgpu"]
# Production feature combining all real implementations
production-ready = ["real-tensor", "real-crypto", "real-auth", "real-cuda", "real-vulkan"]
# Full production with MLIR (requires LLVM 18)
full-production = ["real-mlir", "real-tensor", "real-crypto", "real-auth", "real-cuda", "real-vulkan"]

[build-dependencies]
bindgen = "0.69"
cc = "1.0"
cmake = "0.1"

[dev-dependencies]
criterion = { workspace = true }
proptest = { workspace = true }
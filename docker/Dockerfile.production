# PRCT Algorithm Validation - Production Image
# Multi-stage build for optimized size and security
# Target: NVIDIA H100 PCIe GPU clusters

# Stage 1: Builder
FROM docker.io/nvidia/cuda:12.1.1-devel-ubuntu22.04 AS builder

LABEL maintainer="CAPO-AI PRCT Team <prct@capo-ai.com>"
LABEL stage="builder"

# Build arguments for versioning
ARG RUST_VERSION=1.89.0
ARG PRCT_VERSION=1.0.0
ARG BUILD_DATE
ARG VCS_REF

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    build-essential \
    git \
    pkg-config \
    libssl-dev \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
ENV RUSTUP_HOME=/opt/rust \
    CARGO_HOME=/opt/rust \
    PATH=/opt/rust/bin:$PATH

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | \
    sh -s -- -y --default-toolchain=${RUST_VERSION} --profile minimal && \
    rustup component add rustfmt clippy

# Clone and build PRCT engine
WORKDIR /build
RUN git clone https://github.com/Delfictus/ARES-51.git && \
    cd ARES-51/prct-engine && \
    cargo build --release --bins && \
    cargo test --release --lib

# Extract built artifacts
RUN mkdir -p /artifacts/bin && \
    cp -r /build/ARES-51/prct-engine/target/release/* /artifacts/bin/ && \
    find /artifacts/bin -type f -executable -exec strip {} \;

# Stage 2: Runtime
FROM docker.io/nvidia/cuda:12.1.1-runtime-ubuntu22.04

LABEL maintainer="CAPO-AI PRCT Team <prct@capo-ai.com>"
LABEL description="PRCT Algorithm Validation Runtime for H100 GPUs"
LABEL version="${PRCT_VERSION}"
LABEL org.opencontainers.image.created="${BUILD_DATE}"
LABEL org.opencontainers.image.revision="${VCS_REF}"
LABEL org.opencontainers.image.source="https://github.com/Delfictus/ARES-51"

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-minimal \
    python3-pip \
    libssl3 \
    libgomp1 \
    libblas3 \
    liblapack3 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python scientific stack (optimized versions)
COPY requirements.txt /tmp/
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir -r /tmp/requirements.txt && \
    rm /tmp/requirements.txt

# Create non-root user for security
RUN groupadd -r prct && useradd -r -g prct -m -s /bin/bash prct

# Copy artifacts from builder
COPY --from=builder --chown=prct:prct /artifacts/bin /opt/prct/bin
COPY --from=builder --chown=prct:prct /build/ARES-51/prct-engine/data /opt/prct/data
COPY --from=builder --chown=prct:prct /build/ARES-51/validation /opt/prct/validation

# Set up environment
ENV PATH="/opt/prct/bin:${PATH}" \
    PRCT_HOME="/opt/prct" \
    PRCT_DATA="/opt/prct/data" \
    NVIDIA_VISIBLE_DEVICES="all" \
    NVIDIA_DRIVER_CAPABILITIES="compute,utility"

# Create working directory
WORKDIR /workspace
RUN chown prct:prct /workspace

# Switch to non-root user
USER prct

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD nvidia-smi > /dev/null 2>&1 || exit 1

# Entry point script
COPY --chown=prct:prct docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["prct-validator", "--help"]